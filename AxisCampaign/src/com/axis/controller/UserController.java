package com.axis.controller;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.List;
import java.util.Map.Entry;

import javax.imageio.ImageIO;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.xml.bind.JAXBException;

import org.apache.commons.io.IOUtils;
import org.apache.log4j.Logger;

import com.axis.common.MockMultipartFile;

import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.axis.common.AutogeneratedPassword;
import com.axis.common.FileDownload;
import com.axis.common.FileUpload;
import com.axis.common.GetAdminDetails;
import com.axis.common.ImageProcessor;
import com.axis.common.MessageUtil;
import com.axis.common.UserDashBoard;
import com.axis.exception.DataNotFound;
import com.axis.exception.FormExceptions;
import com.axis.exception.ObjectNotFound;
import com.axis.exception.RecordFound;
import com.axis.model.AcheivementModel;
import com.axis.model.RoleLevelModel;
import com.axis.model.RoleModel;
import com.axis.model.SubRoleLevelModel;
import com.axis.model.UserModel;
import com.axis.service.RoleService;
import com.axis.service.SubRoleLevelService;
import com.axis.service.UserService;

@Controller
public class UserController {

	@Autowired
	private UserService userService;

	@Autowired
	private RoleService roleService;

	@Autowired
	private SubRoleLevelService subRoleLevelService;

	private String filePath = "";
	
	private String filePathSmall = "";
	

	@Autowired
	private MessageUtil messageUtil;

	@Autowired
	private GetAdminDetails getAdminDetails;

	@Autowired
	private UserDashBoard userDashBoard;

	private static final Logger logger = Logger.getLogger(UserController.class);

	@RequestMapping(value = "/Admin/viewUser", method = { RequestMethod.POST,
			RequestMethod.GET })
	public String dummyLinkAddUser(Model model) {

		System.out.println("within dummyLinkAddUser controller");
		List<UserModel> userModels;

		try {
			userModels = userService.getUserList();
			model.addAttribute("userModelsListForTable", userModels);

		} catch (DataNotFound | ObjectNotFound e) {
			model.addAttribute("userListNotFound", e.getMessage());
		}

		return "view-user";
	}

	@RequestMapping(value = "/Admin/addUserForm", method = {
			RequestMethod.POST, RequestMethod.GET })
	public String dummyLinkAddUserForm(Model model) {

		System.out.println("within dummyLinkAddUserForm controller");

		List<RoleModel> roleModels = null;
		try {
			roleModels = roleService.getAllActiveRoleByStatus();
		} catch (ObjectNotFound | DataNotFound e) {
			logger.debug(e.getMessage(), e);
			model.addAttribute("NoActiveRoleFound", e.getMessage());
		}
		model.addAttribute("roleModelListDDL", roleModels);

		return "add-user";
	}

	@RequestMapping(value = "/Admin/ajaxCallForSubRoleLevelList_User", method = {
			RequestMethod.POST, RequestMethod.GET })
	public String ajaxCallForSubRoleLevelList(
			@ModelAttribute RoleModel roleModel,
			HttpServletResponse httpServletResponse) throws IOException {

		PrintWriter pw = httpServletResponse.getWriter();

		try {
			roleModel = roleService.getRoleModelForEdit(roleModel);

			List<SubRoleLevelModel> subRoleLevelModels = subRoleLevelService
					.getSubRoleLevelListByRoleLevelId(roleModel
							.getRoleLevelId());
			for (SubRoleLevelModel temp : subRoleLevelModels) {
				pw.println(temp);
			}
		} catch (DataNotFound | ObjectNotFound e) {
			pw.println(e.getMessage());
		}

		return null;
	}

	@RequestMapping(value = "/Admin/ajaxCallForUserList", method = {
			RequestMethod.POST, RequestMethod.GET })
	public String ajaxCallForUserList(
			@ModelAttribute SubRoleLevelModel subRoleLevelModel,
			HttpServletResponse httpServletResponse, Model model)
			throws DataNotFound, ObjectNotFound, IOException {

		PrintWriter pw = httpServletResponse.getWriter();

		System.out.println("within ajaxCallForUserList controller :: "
				+ subRoleLevelModel.getSubRoleLevelId());
		subRoleLevelModel = subRoleLevelService
				.getSubRoleLevelModelForEdit(subRoleLevelModel);
		System.out.println("incoming model :: "
				+ subRoleLevelModel.getSubRoleLevelId() + " "
				+ subRoleLevelModel.getDescription() + " "
				+ subRoleLevelModel.getRoleLevelId() + " "
				+ subRoleLevelModel.getSubRoleLevelParentId());

		List<UserModel> userModels = userService
				.getUserListBySubRoleLevelId(subRoleLevelModel
						.getSubRoleLevelParentId());
		int i = 0;

		for (UserModel temp : userModels) {
			if (i == 0) {
				i++;
				pw.println(temp.getUserId());
			} else {
			}
			// pw.println(temp);

		}

		return null;
	}

	@RequestMapping(value = "/Admin/insertUserData", method = {
			RequestMethod.POST, RequestMethod.GET })
	public String insertUserData(
			@ModelAttribute UserModel userModel,
			Model model,
			HttpSession httpSession,
			@RequestParam("profilePictureFile") MultipartFile profilePictureFile,
			HttpServletRequest httpServletRequest, ModelAndView modelAndView,
			HttpServletResponse httpServletResponse, RedirectAttributes redir)
			throws DataNotFound, ObjectNotFound {
		System.out.println("in insertUserData controller");

		int createdBy = (int) httpSession.getAttribute("userId");
		userModel.setCreatedBy(createdBy);

		userModel.setUserName(userModel.getEmployeeNumber());
		userModel.setPassword(AutogeneratedPassword.generateRandomPassword());

		try {

			if (profilePictureFile.getSize() > 0) {
				// Upload the User Image
				// filePath = "/resources/images/user/";
				filePath = "/resources/ProfilePictures/";
				filePathSmall = "/resources/ProfilePictures/small";

				userModel.setProfilePicture(userModel.getEmployeeNumber() + "_"
						+ profilePictureFile.getOriginalFilename());

				FileUpload.uploadFile(filePath, profilePictureFile,
						userModel.getProfilePicture(), httpServletRequest,
						httpServletResponse);
				
				InputStream in = new ByteArrayInputStream(profilePictureFile.getBytes());
				BufferedImage bImageFromConvert = ImageIO.read(in);
				
				int type = bImageFromConvert.getType() == 0? BufferedImage.TYPE_INT_ARGB : bImageFromConvert.getType();
				
				BufferedImage resizeImageJpg = ImageProcessor.resizeImage(bImageFromConvert, type);
				
				File outputfile = new File(userModel.getEmployeeNumber() + "_"
						+ profilePictureFile.getOriginalFilename());
				
				ImageIO.write(resizeImageJpg, "jpg", outputfile);
							
				FileInputStream input = new FileInputStream(outputfile);
				
			    MultipartFile multipartFile = new MockMultipartFile("file",
			    		userModel.getEmployeeNumber() + "_"
								+ profilePictureFile.getOriginalFilename(), "text/plain", IOUtils.toByteArray(input));
				
				FileUpload.uploadFile(filePathSmall, multipartFile,
						userModel.getProfilePicture(), httpServletRequest,
						httpServletResponse);} else {
				userModel.setProfilePicture("big-profile.jpeg"); // Setting
																	// Default
																	// Profile
																	// Picture
																	// For User
			}

			userService.insertUserData(userModel);
			model.addAttribute("actionCompletionMessage",
					messageUtil.getBundle("insertSuccessful"));

		} catch (FormExceptions e) {
			for (Entry<String, Exception> entry : e.getExceptions().entrySet()) {
				System.out.println("key :: " + entry.getKey() + " value :: "
						+ entry.getValue().getMessage());
				redir.addFlashAttribute(entry.getKey(), entry.getValue()
						.getMessage());
			}

			List<SubRoleLevelModel> subRoleLevelModels = subRoleLevelService
					.getSubRoleLevelListByRoleLevelId(userModel.getRoleId());

			redir.addFlashAttribute("subRoleLevelList", subRoleLevelModels);
			redir.addFlashAttribute("userModel", userModel);
			redir.addFlashAttribute("errorMessage", e.getMessage());
			return "redirect:/Admin/addUserForm";
		} catch (RecordFound e) {
			e.printStackTrace();

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		List<UserModel> userModels = userService.getUserList();
		model.addAttribute("userModelsListForTable", userModels);

		return "view-user";
	}

	@RequestMapping(value = "/Admin/editUser", method = { RequestMethod.POST,
			RequestMethod.GET })
	public String editUser(@ModelAttribute UserModel userModel, Model model,
			HttpServletRequest httpServletRequest) throws DataNotFound,
			ObjectNotFound {

		userModel = userService.getUserByUseId(userModel);
		System.out.println("in editUser controller :: userId --> "
				+ userModel.getRoleId());

		model.addAttribute("userModelDetails", userModel);

		List<SubRoleLevelModel> subRoleLevelModels = getSubRoleLevelModelListForEdit(userModel
				.getRoleId());
		model.addAttribute("subRoleLevelModelList", subRoleLevelModels);

		List<UserModel> userModels = getUserModelListForEdit(userModel
				.getSubRoleLevelId());
		model.addAttribute("userModelListDDL", userModels);

		List<RoleModel> roleModels = roleService.getAllActiveRoleByStatus();
		model.addAttribute("roleModelListDDL", roleModels);

		return "edit-user";
	}

	@RequestMapping(value = "/Admin/editUserData", method = {
			RequestMethod.POST, RequestMethod.GET })
	public String editUserData(
			@ModelAttribute UserModel userModel,
			@RequestParam("profilePictureFile") MultipartFile profilePictureFile,
			HttpServletRequest httpServletRequest, ModelAndView modelAndView,
			HttpServletResponse httpServletResponse, HttpSession httpSession,
			Model model) throws DataNotFound, ObjectNotFound {

		System.out.println("in editUserData controller :: roleId-->"
				+ userModel.getRoleId() + " subRoleLevelId--> "
				+ userModel.getSubRoleLevelId() + " userParentId--> "
				+ userModel.getUserParentId() + " "
				+ userModel.getEmployeeName());
		
		try {

		if (profilePictureFile.getSize() > 0) {

			userModel.setProfilePicture(userModel.getEmployeeNumber() + "_"
					+ profilePictureFile.getOriginalFilename());

			// Upload the User Image
			// filePath = "/resources/images/user/";
			filePath = "/resources/ProfilePictures/";
			filePathSmall = "/resources/ProfilePictures/small";
			
			FileUpload.uploadFile(filePath, profilePictureFile,
					userModel.getProfilePicture(), httpServletRequest,
					httpServletResponse);
			
			
			InputStream in = new ByteArrayInputStream(profilePictureFile.getBytes());
			BufferedImage bImageFromConvert = ImageIO.read(in);
			
			int type = bImageFromConvert.getType() == 0? BufferedImage.TYPE_INT_ARGB : bImageFromConvert.getType();
			
			BufferedImage resizeImageJpg = ImageProcessor.resizeImage(bImageFromConvert, type);
			
			File outputfile = new File(userModel.getEmployeeNumber() + "_"
					+ profilePictureFile.getOriginalFilename());
			
			ImageIO.write(resizeImageJpg, "jpg", outputfile);
						
			FileInputStream input = new FileInputStream(outputfile);
			
		    MultipartFile multipartFile = new MockMultipartFile("file",
		    		userModel.getEmployeeNumber() + "_"
							+ profilePictureFile.getOriginalFilename(), "text/plain", IOUtils.toByteArray(input));
			
			FileUpload.uploadFile(filePathSmall, multipartFile,
					userModel.getProfilePicture(), httpServletRequest,
					httpServletResponse);
		}

		int createdBy = (int) httpSession.getAttribute("userId");
		userModel.setUpdatedBy(createdBy);


			userService.editUserData(userModel);
			model.addAttribute("actionCompletionMessage",
					messageUtil.getBundle("editSuccessful"));

		} catch (FormExceptions e) {
			System.out.println("see the map :: " + e.getExceptions().size());

			for (Entry<String, Exception> entry : e.getExceptions().entrySet()) {
				System.out.println("key :: " + entry.getKey() + " value :: "
						+ entry.getValue().getMessage());
				model.addAttribute(entry.getKey(), entry.getValue()
						.getMessage());
			}
			List<RoleModel> roleModels = roleService.getAllActiveRoleByStatus();
			model.addAttribute("roleModelListDDL", roleModels);

			List<SubRoleLevelModel> subRoleLevelModels = subRoleLevelService
					.getSubRoleLevelListByRoleLevelId(userModel.getRoleId());

			model.addAttribute("subRoleLevelModelList", subRoleLevelModels);
			model.addAttribute("userModelDetails", userModel);
			model.addAttribute("errorMessage", e.getMessage());

			return "edit-user";

		} catch (RecordFound e) {

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		List<UserModel> userModels = userService.getUserList();
		model.addAttribute("userModelsListForTable", userModels);

		return "view-user";
	}

	@RequestMapping(value = "/Admin/deleteUser", method = { RequestMethod.POST,
			RequestMethod.GET })
	public String deleteUser(@ModelAttribute UserModel userModel, Model model,
			HttpServletRequest httpServletRequest) throws DataNotFound,
			ObjectNotFound {

		System.out.println("in deleteUser controller :: roleId-->"
				+ userModel.getRoleId());
		userModel.setUpdatedBy(1);
		userService.deleteUser(userModel);
		List<UserModel> userModels = userService.getUserList();
		model.addAttribute("userModelsListForTable", userModels);

		return "view-user";
	}

	private List<SubRoleLevelModel> getSubRoleLevelModelListForEdit(
			Integer roleId) throws DataNotFound, ObjectNotFound {

		RoleModel roleModel = new RoleModel();
		roleModel.setRoleId(roleId);

		roleModel = roleService.getRoleModelForEdit(roleModel);

		List<SubRoleLevelModel> subRoleLevelModels = subRoleLevelService
				.getSubRoleLevelListByRoleLevelId(roleModel.getRoleLevelId());

		return subRoleLevelModels;

	}

	private List<UserModel> getUserModelListForEdit(Integer subRoleLevelId)
			throws DataNotFound, ObjectNotFound {

		SubRoleLevelModel subRoleLevelModel = new SubRoleLevelModel();
		subRoleLevelModel.setSubRoleLevelId(subRoleLevelId);

		subRoleLevelModel = subRoleLevelService
				.getSubRoleLevelModelForEdit(subRoleLevelModel);

		List<UserModel> userModels = userService
				.getUserListBySubRoleLevelId(subRoleLevelModel
						.getSubRoleLevelParentId());

		return userModels;

	}

	/**
	 * This method only show for add user upload page
	 * 
	 * @throws DataNotFound
	 * */
	@RequestMapping(value = "/Admin/userUploadPage", method = {
			RequestMethod.POST, RequestMethod.GET })
	public ModelAndView addTargetValueUploadController(Model model) {

		// Fetching the Campaign List
		List<RoleModel> roleList = null;
		try {
			roleList = roleService.getAllActiveRoleByStatus();
		} catch (ObjectNotFound | DataNotFound e) {
			model.addAttribute("NoActiveRoleFound", e.getMessage());
		}
		model.addAttribute("roleList", roleList);

		return new ModelAndView("user-upload");
	}

	/*
	 * @RequestMapping(value = "/Admin/bulkUploadUser", method =
	 * RequestMethod.POST, headers = "content-type=multipart/*") public
	 * ModelAndView uploadTargetFieldValue(@RequestParam String roleId,
	 * 
	 * @RequestParam("fileName") MultipartFile fileName, HttpSession
	 * httpSession, ModelAndView modelAndView, RedirectAttributes redir) {
	 * 
	 * int createdBy = (int) httpSession.getAttribute("userId");
	 * 
	 * String name = fileName.getOriginalFilename();
	 * 
	 * if (roleId.contains("0")){ redir.addFlashAttribute("file_not_supported",
	 * "Please Select any Role");
	 * modelAndView.setViewName("redirect:/Admin/userUploadPage"); return
	 * modelAndView;
	 * 
	 * } if (name.trim().equals("")){
	 * redir.addFlashAttribute("file_not_supported", "No File specified");
	 * modelAndView.setViewName("redirect:/Admin/userUploadPage"); return
	 * modelAndView;
	 * 
	 * }
	 * 
	 * if (name.contains(".xls") || name.contains(".xlsx")) { list =
	 * userService.getFileandSave(roleId, fileName, createdBy);
	 * System.out.println(list);
	 * 
	 * modelAndView.setViewName("redirect:/Admin/userUploadPage"); List<Integer>
	 * mismatchedLists = null; Integer count = null; if(list.get(list.size() -
	 * 1) != null){ System.out.println(list.size()); count =
	 * list.get(list.size() - 1).getReceivedNotificationsNumber();//used this
	 * field to count no.of rows inserted mismatchedLists = list.get(list.size()
	 * - 1) .getUnmatchedLists(); if(mismatchedLists == null)
	 * list.remove(list.get(list.size() - 1)); } else{
	 * list.remove(list.get(list.size() - 1)); }
	 * redir.addFlashAttribute("mismatchedRowsList", mismatchedLists);
	 * list.remove(list.get(list.size() - 1));
	 * redir.addFlashAttribute("unstoredUserList", list);
	 * 
	 * redir.addFlashAttribute("file_not_supported",
	 * count+" number of rows uploaded successfully"); return modelAndView;
	 * 
	 * } else { redir.addFlashAttribute("file_not_supported",
	 * "File Format not supported");
	 * modelAndView.setViewName("redirect:/Admin/userUploadPage"); return
	 * modelAndView;
	 * 
	 * }
	 * 
	 * String name = fileName.getOriginalFilename(); if (name.trim().equals(""))
	 * try { throw new DataNotFound("File not specified"); } catch (DataNotFound
	 * e) { // TODO Auto-generated catch block e.printStackTrace(); }
	 * 
	 * if (name.contains(".xls") || name.contains(".xlsx")) { List<UserModel>
	 * list = null; try { list = userService.getFileandSave(roleId, fileName,
	 * createdBy); } catch (Exception e) { // TODO Auto-generated catch block
	 * e.printStackTrace(); } System.out.println(list);
	 * 
	 * modelAndView.setViewName("redirect:/Admin/userUploadPage"); List<Integer>
	 * mismatchedLists = list.get(list.size() - 1) .getUnmatchedLists();
	 * redir.addFlashAttribute("mismatchedRowsList", mismatchedLists);
	 * redir.addFlashAttribute("unstoredUserList", list); return modelAndView;
	 * 
	 * }
	 * 
	 * else if (name.contains(".csv")){
	 * 
	 * userUploadService.readCSVFile(campaignId,fileName); return
	 * "redirect:addTargetValueUploadPage";
	 * 
	 * 
	 * }
	 * 
	 * return null;
	 * 
	 * }
	 */

	@RequestMapping(value = "/Admin/bulkUploadUser", method = RequestMethod.POST, headers = "content-type=multipart/*")
	public ModelAndView uploadTargetFieldValue(@RequestParam String roleId,
			@RequestParam("fileName") MultipartFile fileName,
			HttpSession httpSession, ModelAndView modelAndView,
			RedirectAttributes redir) {

		int createdBy = (int) httpSession.getAttribute("userId");

		String name = fileName.getOriginalFilename();

		if (roleId.contains("0")) {
			redir.addFlashAttribute("file_not_supported",
					"Please Select any Role");
			modelAndView.setViewName("redirect:/Admin/userUploadPage");
			return modelAndView;

		}
		if (name.trim().equals("")) {
			redir.addFlashAttribute("file_not_supported", "No File specified");
			modelAndView.setViewName("redirect:/Admin/userUploadPage");
			return modelAndView;

		}

		if (name.contains(".xls") || name.contains(".xlsx")) {

			List<UserModel> list = null;

			try {

				list = userService.getFileandSave(roleId, fileName, createdBy);
				System.out.println(list);

				modelAndView.setViewName("redirect:/Admin/userUploadPage");
				List<Integer> mismatchedLists = null;
				Integer count = null;
				if (list.get(list.size() - 1) != null) {
					System.out.println(list.size());
					count = list.get(list.size() - 1)
							.getReceivedNotificationsNumber();// used this field
																// to
																// count no.of
																// rows
																// inserted
					mismatchedLists = list.get(list.size() - 1)
							.getUnmatchedLists();
					if (mismatchedLists == null)
						list.remove(list.get(list.size() - 1));
				} else {
					list.remove(list.get(list.size() - 1));
				}
				redir.addFlashAttribute("mismatchedRowsList", mismatchedLists);
				list.remove(list.get(list.size() - 1));
				redir.addFlashAttribute("unstoredUserList", list);

				redir.addFlashAttribute("file_not_supported", count
						+ " number of rows uploaded successfully");
				return modelAndView;

			} catch (Exception e) {
				redir.addFlashAttribute("file_not_supported", "File Corrupted");
				modelAndView.setViewName("redirect:/Admin/userUploadPage");
				return modelAndView;
			}

		} else {
			redir.addFlashAttribute("file_not_supported",
					"File Format not supported");
			modelAndView.setViewName("redirect:/Admin/userUploadPage");
			return modelAndView;

		}

	}

	/*********************************************** User Module For View Profile ******************************************************/

	@RequestMapping(value = "/viewProfile", method = RequestMethod.GET)
	public String viewUserProfile(Model model, HttpSession httpSession) {

		if (logger.isDebugEnabled()) {
			logger.debug("viewUserProfile-Start ");
		}

		try {
			userDashBoard.getDashBoardDetails(httpSession, model);
			

		} catch (FormExceptions | DataNotFound | ObjectNotFound e) {
			for (Entry<String, Exception> entry : ((FormExceptions) e)
					.getExceptions().entrySet()) {
				System.out.println("key :: " + entry.getKey() + " value :: "
						+ entry.getValue().getMessage());
				model.addAttribute(entry.getKey(), entry.getValue()
						.getMessage());
			}
		}

		if (logger.isDebugEnabled()) {
			logger.debug("viewUserProfile-End ");
		}

		return "view-profile";
	}

	@RequestMapping(value = "/editProfile", method = RequestMethod.GET)
	public String editUserProfile(Model model, HttpSession httpSession) {

		if (logger.isDebugEnabled()) {
			logger.debug("editUserProfile-Start ");
		}

		UserModel userModel = new UserModel();

		userModel.setUserId((int) httpSession.getAttribute("userId")); // Session
																		// Of
																		// Current
																		// User

		try {
			UserModel userModel2 = userService.getUserByUseId(userModel);
			model.addAttribute("userModel", userModel2);

		} catch (ObjectNotFound e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			
			try {
				userDashBoard.getDashBoardDetails(httpSession, model);

			}
			catch (FormExceptions e) {
				for (Entry<String, Exception> entry : ((FormExceptions) e)
						.getExceptions().entrySet()) {
					System.out.println("key :: " + entry.getKey() + " value :: "
							+ entry.getValue().getMessage());
					model.addAttribute(entry.getKey(), entry.getValue()
							.getMessage());
			}
			
			}
			catch(Exception e) {
				
			}
		}

		if (logger.isDebugEnabled()) {
			logger.debug("editUserProfile-End ");
		}

		return "edit-profile";
	}

	@RequestMapping(value = "/saveUserChanges", method = RequestMethod.POST)
	public String saveUserChanges(
			Model model,
			@ModelAttribute UserModel userModel,
			HttpSession httpSession,
			@RequestParam("profilePictureFile") MultipartFile profilePictureFile,
			HttpServletRequest httpServletRequest,
			HttpServletResponse httpServletResponse) {

		if (logger.isDebugEnabled()) {
			logger.debug("saveUserChanges-Start ");
		}

		userModel.setEmployeeNumber((String) httpSession
				.getAttribute("employeeNumber"));
		try {
		if (profilePictureFile.getSize() > 0) {

			userModel.setProfilePicture(userModel.getEmployeeNumber() + "_"
					+ profilePictureFile.getOriginalFilename());

			// Upload the User Image
			// filePath = "/resources/images/user/";
			filePath = "/resources/ProfilePictures/";
			filePathSmall = "/resources/ProfilePictures/small";
			
			FileUpload.uploadFile(filePath, profilePictureFile,
					userModel.getProfilePicture(), httpServletRequest,
					httpServletResponse);
			
			InputStream in = new ByteArrayInputStream(profilePictureFile.getBytes());
			BufferedImage bImageFromConvert = ImageIO.read(in);
			
			int type = bImageFromConvert.getType() == 0? BufferedImage.TYPE_INT_ARGB : bImageFromConvert.getType();
			
			BufferedImage resizeImageJpg = ImageProcessor.resizeImage(bImageFromConvert, type);
			
			File outputfile = new File(userModel.getEmployeeNumber() + "_"
					+ profilePictureFile.getOriginalFilename());
			
			ImageIO.write(resizeImageJpg, "jpg", outputfile);
						
			FileInputStream input = new FileInputStream(outputfile);
			
		    MultipartFile multipartFile = new MockMultipartFile("file",
		    		userModel.getEmployeeNumber() + "_"
							+ profilePictureFile.getOriginalFilename(), "text/plain", IOUtils.toByteArray(input));
			
			FileUpload.uploadFile(filePathSmall, multipartFile,
					userModel.getProfilePicture(), httpServletRequest,
					httpServletResponse);
		}

		userModel.setUserId((int) httpSession.getAttribute("userId"));
		userModel.setUpdatedBy(userModel.getUserId());

		userService.updateUserProfile(userModel);


			userDashBoard.getDashBoardDetails(httpSession, model);

		} catch (FormExceptions e) {
			for (Entry<String, Exception> entry : ((FormExceptions) e)
					.getExceptions().entrySet()) {
				System.out.println("key :: " + entry.getKey() + " value :: "
						+ entry.getValue().getMessage());
				model.addAttribute(entry.getKey(), entry.getValue()
						.getMessage());
			}
		} catch (Exception e) {
			model.addAttribute("NoEscalationMatrixFound", e.getMessage());
		} finally {

			try {
				userDashBoard.getDashBoardDetails(httpSession, model);

			} catch (FormExceptions e) {
				for (Entry<String, Exception> entry : ((FormExceptions) e)
						.getExceptions().entrySet()) {
					System.out.println("key :: " + entry.getKey()
							+ " value :: " + entry.getValue().getMessage());
					model.addAttribute(entry.getKey(), entry.getValue()
							.getMessage());
				}

			} catch (Exception e) {

			}
			finally {
				try {
					model.addAttribute("logoIcon",UserLoginController.getIconPath(httpServletRequest));
				} catch (JAXBException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		
		if (logger.isDebugEnabled()) {
			logger.debug("saveUserChanges-End ");
		}

		return "view-profile";
	}

	/*
	 * ------------------------------ Admin Update Profile
	 * -------------------------------------------
	 */

	@RequestMapping(value = "/Admin/editAdminProfile", method = {
			RequestMethod.POST, RequestMethod.GET })
	public String editAdminProfile(Model model,
			HttpServletRequest httpServletRequest) {

		UserModel userModel = getAdminDetails.fetchAdminInfo();

		model.addAttribute("userModel", userModel);

		return "view-admin";
	}

	@RequestMapping(value = "/Admin/updateAdminProfile", method = {
			RequestMethod.POST, RequestMethod.GET })
	public String updateAdminProfile(Model model,
			@ModelAttribute UserModel userModel,
			final RedirectAttributes redirectAttributes) {

		if (logger.isDebugEnabled()) {
			logger.debug("updateAdminProfile-Start ");
		}

		try {
			userService.editAdminData(userModel);
			model.addAttribute("UpdateInfo",
					messageUtil.getBundle("admin.profile.updated"));
			// redirectAttributes.addFlashAttribute("userModel", userModel);
			// return ("redirect:/Admin/adminLogin");
			return ("admin-home");
		} catch (FormExceptions e) {
			System.out.println("see the map :: " + e.getExceptions().size());

			for (Entry<String, Exception> entry : e.getExceptions().entrySet()) {
				System.out.println("key :: " + entry.getKey() + " value :: "
						+ entry.getValue().getMessage());
				redirectAttributes.addFlashAttribute(entry.getKey(), entry
						.getValue().getMessage());
			}

		} catch (DataNotFound e) {
			redirectAttributes.addFlashAttribute("UpdateInfo", e.getMessage());
		} catch (RecordFound e) {
			redirectAttributes.addFlashAttribute("UpdateInfo", e.getMessage());
		} catch (ObjectNotFound e) {
			redirectAttributes.addFlashAttribute("UpdateInfo", e.getMessage());
		}

		if (logger.isDebugEnabled()) {
			logger.debug("updateAdminProfile-End ");
		}

		return ("redirect:/Admin/editAdminProfile");
	}

	/*
	 * ----------------------------------------------- User Demo Excel Upload
	 * --------------------------------------------------
	 */

	/**
	 * For getting Generated Excel Sheet
	 * 
	 * @throws IOException
	 */
	@RequestMapping(value = "/Admin/userDemoExcel", method = RequestMethod.GET)
	public String userDemoExcel(HttpServletRequest request,
			HttpServletResponse response, ModelMap modelMap,
			final RedirectAttributes redirectAttributes) throws DataNotFound,
			ObjectNotFound, IOException {

		if (logger.isDebugEnabled()) {
			logger.debug("userDemoExcel-Start ");
		}

		/* ******************** Excell Starts ******************** */

		HSSFWorkbook myWorkBook = new HSSFWorkbook();
		HSSFSheet mySheet = myWorkBook.createSheet();

		Row headerRow = mySheet.createRow(0);
		headerRow.setHeightInPoints(50);

		int i = 0;

		/*
		 * for(AcheivementModel acheivementModel : acheivementModels) {
		 * 
		 * Cell monthCell = headerRow.createCell(i++);
		 * monthCell.setCellValue(acheivementModel.getFieldName());
		 * 
		 * }
		 */

		String fileName = "";// roleId1+"_"+campId1+".xls";
		filePath = "/RoleCampaignExcel/";

		// get absolute path of the application
		ServletContext context = request.getServletContext();
		String appPath = context.getRealPath("");
		System.out.println("appPath = " + appPath);

		// Creating the directory to store file

		File dir = new File(appPath + File.separator + filePath);

		if (!dir.exists())
			dir.mkdirs();

		// Create the file on server
		File serverFile = new File(dir.getPath() + File.separator + fileName);

		// File file = new File("D:\\"+roleId1+"_"+campId1+".xls");

		FileOutputStream fop = new FileOutputStream(serverFile);
		myWorkBook.write(fop);

		try {
			FileDownload.downloadFile(filePath, fileName, request, response);
			redirectAttributes.addFlashAttribute("campaignAdded",
					messageUtil.getBundle("File.Download"));
		} catch (Exception e) {
			logger.debug(e.getMessage(), e);
			redirectAttributes.addFlashAttribute("campaignAdded",
					messageUtil.getBundle("File.not.found"));
		}

		// PrintWriter pw=response.getWriter();
		// pw.println(serverFile.getPath());

		if (logger.isDebugEnabled()) {
			logger.debug("userDemoExcel-End ");
		}

		return "upload-AcheivementExcelSheet";

	}
}
