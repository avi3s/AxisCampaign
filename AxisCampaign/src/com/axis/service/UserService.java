package com.axis.service;

import java.util.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.multipart.MultipartFile;

import com.axis.common.AutogeneratedPassword;
import com.axis.common.MessageUtil;
import com.axis.controller.UserController;
import com.axis.converter.RoleConverter;
import com.axis.converter.UserConverter;
import com.axis.dao.RoleDao;
import com.axis.dao.UserDao;
import com.axis.entity.RoleCampaignEntity;
import com.axis.entity.RoleEntity;
import com.axis.entity.UserEntity;
import com.axis.exception.DataNotFound;
import com.axis.exception.FormExceptions;
import com.axis.exception.ObjectNotFound;
import com.axis.exception.RecordFound;
import com.axis.model.CampaignFileUserModel;
import com.axis.model.CampaignModel;
import com.axis.model.NotificationModel;
import com.axis.model.RoleModel;
import com.axis.model.SubRoleLevelModel;
import com.axis.model.UserModel;
import com.axis.validation.ContentManagementDataValidation;
import com.axis.validation.UserDataValidation;

import java.io.*;

import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

@Service
@Transactional
public class UserService {

	@Autowired
	private UserConverter userConverter;

	@Autowired
	private UserDao userDao;

	@Autowired
	private MessageUtil messageUtil;

	@Autowired
	private SubRoleLevelService subRoleLevelService;

	@Autowired
	private UserDataValidation userDataValidation;

	private static final Logger logger = Logger.getLogger(UserService.class);

	public List<UserModel> getUserListBySubRoleLevelId(Integer parentid)
			throws DataNotFound, ObjectNotFound {

		List<UserEntity> userEntities = userDao
				.getUserListBySubRoleLevelId(parentid);
		System.out.println("**** :: " + userEntities.size());
		for (UserEntity userEntity : userEntities)
			System.out.println("user Entity :: " + userEntity.getEmployeeName()
					+ " " + userEntity.getUserId());

		List<UserModel> userModels = userConverter
				.entityListToModelList(userEntities);
		return userModels;

	}

	public void insertUserData(UserModel userModel) throws FormExceptions,
			DataNotFound, RecordFound, ObjectNotFound {

		/*
		 * System.out.println("user inputs :: role id :: " +
		 * userModel.getRoleId() + "  sub role level " +
		 * userModel.getSubRoleLevelId() + " primary :: " +
		 * userModel.getPrimaryTelephoneNumber() + " user name" +
		 * userModel.getUserName() + " email " + userModel.getEmailAddress() +
		 * " employee number " + userModel.getEmployeeNumber() + " parent id " +
		 * userModel.getUserParentId());
		 */

		userDataValidation.UserCreateValidate(userModel);

		Map<String, Exception> exceptions = new HashMap<String, Exception>();

		String email_regex_pattern = "^[\\w-_\\.+]*[\\w-_\\.]\\@([\\w]+\\.)+[\\w]+[\\w]$";
		String phone_regex_pattern = "^[0-9]{10}$";
		boolean phone_flag = userModel.getPrimaryTelephoneNumber().matches(
				phone_regex_pattern);
		boolean email_flag = userModel.getEmailAddress().matches(
				email_regex_pattern);

		if (!phone_flag)
			exceptions.put(
					"phoneFormatNotCorrect",
					new RecordFound(messageUtil
							.getBundle("user.phone.format.not.correct")));
		if (!email_flag)
			exceptions.put(
					"emailFormatNotCorrect",
					new RecordFound(messageUtil
							.getBundle("user.email.format.not.correct")));

		if (exceptions.size() > 0)
			throw new FormExceptions(exceptions);

		List<UserModel> userList = this.fetchAllUserByStatus();
		int k = 0;
		while (k < userList.size()) {
			if (userList.get(k).getUserName()
					.equalsIgnoreCase(userModel.getUserName())) {
				exceptions
						.put("usernameAlreadypresent",
								new RecordFound(
										messageUtil
												.getBundle("user.username.already.present")));
			}
			if (userList.get(k).getEmployeeNumber()
					.equalsIgnoreCase(userModel.getEmployeeNumber())) {
				exceptions
						.put("userEmployeeNumberAlreadypresent",
								new RecordFound(
										messageUtil
												.getBundle("user.employeenumber.already.present")));
			}
			if (userList.get(k).getEmailAddress()
					.equalsIgnoreCase(userModel.getEmailAddress())) {
				exceptions.put("userEmailAlreadyPresent", new RecordFound(
						messageUtil.getBundle("user.email.already.present")));
			}
			if (userList.get(k).getPrimaryTelephoneNumber()
					.equalsIgnoreCase(userModel.getPrimaryTelephoneNumber())) {
				exceptions
						.put("userPrimaryTelephoneAlreadyPresent",
								new RecordFound(
										messageUtil
												.getBundle("user.primaryTelephone.already.present")));
			}
			k++;
		}

		if (exceptions.size() > 0)
			throw new FormExceptions(exceptions);

		UserEntity userEntity = userConverter.modelToEntity(userModel);
		/*
		 * System.out.println("role Entity Converted :: userparentid --> " +
		 * userEntity.getUserEntity().getUserId() + " subroleid-->  " +
		 * userEntity.getSubRoleLevelEntity().getSubRoleLevelId() +
		 * " roleid--> " + userEntity.getRoleEntity().getRoleId() +
		 * " employeename-->  " + userEntity.getEmployeeName());
		 */
		userDao.create(userEntity);

	}

	/*
	 * public List<UserModel> getUserList() throws DataNotFound, ObjectNotFound
	 * { List<UserEntity> userEntities = userDao.findAll(); for (UserEntity
	 * userEntity : userEntities) { System.out .println("find all method :: " +
	 * userEntity.getUserId() + " " + userEntity.getEmployeeName() + " " +
	 * userEntity.getUserEntity().getUserId() + "  " +
	 * userEntity.getUserEntity().getEmployeeName() + " " +
	 * userEntity.getRoleEntity().getRoleId() + " " +
	 * userEntity.getRoleEntity().getRoleName() + " " +
	 * userEntity.getSubRoleLevelEntity() .getSubRoleLevelId() + " " +
	 * userEntity.getSubRoleLevelEntity() .getDescription()); } List<UserModel>
	 * userModels = userConverter .entityListToModelList(userEntities); return
	 * userModels;
	 * 
	 * }
	 * 
	 * public UserModel getUserByUseId(UserModel userModel) throws
	 * ObjectNotFound { UserEntity userEntity =
	 * userDao.find(userModel.getUserId());
	 * System.out.println("1 userEntity :: " + userEntity.getUserId() + " " +
	 * userEntity.getEmployeeName() + " " +
	 * userEntity.getUserEntity().getUserId() + "  " +
	 * userEntity.getUserEntity().getEmployeeName() + " " +
	 * userEntity.getRoleEntity().getRoleId() + " " +
	 * userEntity.getRoleEntity().getRoleName() + " " +
	 * userEntity.getSubRoleLevelEntity().getSubRoleLevelId() + " " +
	 * userEntity.getSubRoleLevelEntity().getDescription()); userModel =
	 * userConverter.entityToModel(userEntity); return userModel; }
	 * 
	 * public void editUserData(UserModel userModel) {
	 * 
	 * UserEntity userEntity = userDao.find(userModel.getUserId());
	 * System.out.println("role Entity Converted :: userparentid --> " +
	 * userEntity.getUserEntity().getUserId() + " subroleid-->  " +
	 * userEntity.getSubRoleLevelEntity().getSubRoleLevelId() + " roleid--> " +
	 * userEntity.getRoleEntity().getRoleId() + " employeename-->  " +
	 * userEntity.getEmployeeName()); userEntity =
	 * userConverter.updateModelToEntity(userModel, userEntity);
	 * userDao.update(userEntity);
	 * 
	 * }
	 * 
	 * public void deleteUser(UserModel userModel) {
	 * 
	 * UserEntity userEntity = userDao.find(userModel.getUserId());
	 * System.out.println("role Entity Converted :: userparentid --> " +
	 * userEntity.getUserEntity().getUserId() + " subroleid-->  " +
	 * userEntity.getSubRoleLevelEntity().getSubRoleLevelId() + " roleid--> " +
	 * userEntity.getRoleEntity().getRoleId() + " employeename-->  " +
	 * userEntity.getEmployeeName()); userEntity =
	 * userConverter.deleteModelToEntity(userModel, userEntity);
	 * userDao.update(userEntity); }
	 * 
	 * public List<UserModel> fetchAllUserByStatus() throws DataNotFound,
	 * ObjectNotFound {
	 * 
	 * List<UserModel> userModels = userConverter
	 * .entityListToModelList(userDao.findAllActiveUserByStatus());
	 * 
	 * return userModels; }
	 * 
	 * public List<UserModel> fetchAllUserByRole(int roleId) throws
	 * DataNotFound, ObjectNotFound {
	 * 
	 * List<UserModel> userModels = userConverter
	 * .entityListToModelList(userDao.findAllActiveUserByRole(roleId));
	 * 
	 * return userModels; }
	 * 
	 * public UserModel adminLoginCheck(UserModel userModel) throws
	 * DataNotFound, ObjectNotFound {
	 * 
	 * List<UserEntity> userEntities = userDao.adminLoginCheck(userModel); if
	 * (userEntities.isEmpty() || userEntities == null || userEntities.size() ==
	 * 0) { System.out.println("noooo user found"); throw new DataNotFound(
	 * messageUtil.getBundle("invalid.login.credentials")); } else { for
	 * (UserEntity userEntity : userEntities) { System.out.println("data ---> "
	 * + userEntity.getUserName() + "  " + userEntity.getEmployeeName() + " " +
	 * userEntity.getRoleEntity().getRoleName()); userModel =
	 * userConverter.entityToModel(userEntity); } } return userModel; }
	 */

	public UserModel userLoginCheck(UserModel userModel) throws DataNotFound,
			ObjectNotFound {
		List<UserEntity> userEntities = userDao.userLoginCheck(userModel);
		if (userEntities.isEmpty() || userEntities == null
				|| userEntities.size() == 0) {
			System.out.println("noooo user found");
			throw new DataNotFound(
					messageUtil.getBundle("invalid.login.credentials"));
		} else {
			for (UserEntity userEntity : userEntities) {
				// System.out.println("data ---> "+userEntity.getUserName()+"  "+userEntity.getEmployeeName()+" "+userEntity.getRoleEntity().getRoleName()+" "+userEntity.getReceivedNotificationEntities().get(0).getSentUserId().getEmployeeName());
				// System.out.println("campaign file --> "+userEntity.getRoleEntity().getRoleCampaignEntities().get(0).getCampaignEntity().getCampaignFileEntities().get(0).getFileName());
				userModel = userConverter.entityToModel(userEntity);
			}
		}
		return userModel;
	}

	public List<NotificationModel> getTopFiveReceivedNotifications(
			UserModel userModel) {

		List<NotificationModel> notificationModels = userModel
				.getNotificationModels();
		for (NotificationModel notificationModel : notificationModels) {
			System.out.println("before :: " + notificationModel.getMessage()
					+ "  " + notificationModel.getCreateTimeStamp());
		}
		Collections.sort(notificationModels,
				new Comparator<NotificationModel>() {

					@Override
					public int compare(NotificationModel obj1,
							NotificationModel obj2) {
						return (int) (obj2.getCreateTimeStamp().getTime() - obj1
								.getCreateTimeStamp().getTime());
					}

				});

		if (notificationModels.size() > 5)
			notificationModels = notificationModels.subList(0, 5);

		for (NotificationModel notificationModel : notificationModels) {
			// System.out.println("after :: "+notificationModel.getMessage()+"  "+notificationModel.getCreateTimeStamp()+"  "+notificationModel.g);
		}
		return notificationModels;
	}

	public List<CampaignFileUserModel> getTopFiveUserCampaignFiles(
			UserModel userModel) {

		List<CampaignFileUserModel> campaignFileUserModels = userModel
				.getCampaignFileUserModels();
		for (CampaignFileUserModel campaignFileUserModel : campaignFileUserModels) {
			System.out.println("before :: "
					+ campaignFileUserModel.getFileName() + "  "
					+ campaignFileUserModel.getCreateTimeStamp());
		}
		Collections.sort(campaignFileUserModels,
				new Comparator<CampaignFileUserModel>() {

					@Override
					public int compare(CampaignFileUserModel obj1,
							CampaignFileUserModel obj2) {
						return (int) (obj2.getCreateTimeStamp().getTime() - obj1
								.getCreateTimeStamp().getTime());
					}

				});

		if (campaignFileUserModels.size() > 5)
			campaignFileUserModels = campaignFileUserModels.subList(0, 5);
		// for(NotificationModel notificationModel : notificationModels){
		// //System.out.println("after :: "+notificationModel.getMessage()+"  "+notificationModel.getCreateTimeStamp()+"  "+notificationModel.g);
		// }
		return campaignFileUserModels;
	}

	public List<UserModel> getUserListByCampaignId(CampaignModel campaignModel)
			throws DataNotFound, ObjectNotFound {

		List<UserEntity> userEntities = userDao.findAllActiveUserByStatus();
		List<UserEntity> userEntities2 = new LinkedList<UserEntity>();

		for (UserEntity userEntity : userEntities) {
			System.out.println("users :: " + userEntity.getEmployeeName());

			for (RoleCampaignEntity roleCampaignEntity : userEntity
					.getRoleEntity().getRoleCampaignEntities()) {

				if (roleCampaignEntity.getCampaignEntity().getCampaignId() == campaignModel
						.getCampaignId()) {
					userEntities2.add(userEntity);
					break;
				}
			}
		}

		List<UserModel> userModels = userConverter
				.entityListToModelList(userEntities2);

		return userModels;
	}

	public Integer ajaxCallForUserList(SubRoleLevelModel subRoleLevelModel)
			throws DataNotFound, ObjectNotFound, IOException {

		System.out.println("within ajaxCallForUserList controller :: "
				+ subRoleLevelModel.getSubRoleLevelId());
		subRoleLevelModel = subRoleLevelService
				.getSubRoleLevelModelForEdit(subRoleLevelModel);
		System.out.println("incoming model :: "
				+ subRoleLevelModel.getSubRoleLevelId() + " "
				+ subRoleLevelModel.getDescription() + " "
				+ subRoleLevelModel.getRoleLevelId() + " "
				+ subRoleLevelModel.getSubRoleLevelParentId());

		List<UserModel> userModels = this
				.getUserListBySubRoleLevelId(subRoleLevelModel
						.getSubRoleLevelParentId());

		return userModels.get(0).getUserParentId();
	}

	public List<UserModel> getFileandSave(String roleId, MultipartFile file,
			int createdBy) throws Exception {
		List<UserModel> failedmodels;
		failedmodels = new ArrayList<UserModel>();
		List<Integer> mismatchedRowsList = new ArrayList<Integer>();
		try {
			int user_upload_rows = 5;

			//POIFSFileSystem fileSystem = null;

			List<UserModel> userList = this.fetchAllUserByStatus();

/*			fileSystem = new POIFSFileSystem(new ByteArrayInputStream(
					file.getBytes()));*/
			int rows;
			
			   if (! file.getOriginalFilename().contains(".xlsx")) {
				    // excel
				    POIFSFileSystem fileSystem = null;
				    fileSystem = new POIFSFileSystem(new ByteArrayInputStream(
				      file.getBytes()));
				    HSSFWorkbook workbook = new HSSFWorkbook(fileSystem);
				    HSSFSheet sheet = workbook.getSheetAt(0);
				    rows = sheet.getPhysicalNumberOfRows();
				    
			/*if (file.getOriginalFilename().contains(".xls")) {
				// excel
				HSSFWorkbook workbook = new HSSFWorkbook(fileSystem);
				HSSFSheet sheet = workbook.getSheetAt(0);
				rows = sheet.getPhysicalNumberOfRows();*/
				for (int i = 0; i < rows; i++) {
					boolean valid_flag = true;
					HSSFRow row = sheet.getRow(i);
					if (row != null) {
						// excel
						int cells = row.getPhysicalNumberOfCells();
						String value = "";
						//
						for (int j = 0; j < cells; j++) {
							//
							HSSFCell cell = row.getCell(j);
							if (cell != null) {
								switch (cell.getCellType()) {
								case HSSFCell.CELL_TYPE_FORMULA:
									break;
								case HSSFCell.CELL_TYPE_NUMERIC:
									value += (int) cell.getNumericCellValue()
											+ ",";
									break;
								case HSSFCell.CELL_TYPE_STRING:
									value += cell.getStringCellValue() + ",";
									break;
								default:
									break;
								}
							}
						}
						// mysql
						String[] val = value.split(",");

						if (val.length == user_upload_rows) {

							System.out.println(val.length);

							if (i > 0) {

								if (user_upload_rows > 0) {

									// val[0] email_address
									// val[1] employee_name
									// val[2] employee_number
									// val[3] primary telephone
									// val[4] sol_id
									int k = 0;
									String email_regex_pattern = "^[\\w-_\\.+]*[\\w-_\\.]\\@([\\w]+\\.)+[\\w]+[\\w]$";
									String phone_regex_pattern = "^[0-9]{10}$";
									boolean phone_flag = val[3]
											.matches(phone_regex_pattern);
									boolean email_flag = val[0]
											.matches(email_regex_pattern);
									if (email_flag && phone_flag) {
										while (k < userList.size()) {
											if (userList.get(k)
													.getEmailAddress()
													.equalsIgnoreCase(val[0])
													|| userList
															.get(k)
															.getPrimaryTelephoneNumber()
															.equalsIgnoreCase(
																	val[3])
													|| userList
															.get(k)
															.getEmployeeNumber()
															.equalsIgnoreCase(
																	val[2])) {

												UserModel uModel = new UserModel();
												uModel.setEmailAddress(val[0]);
												uModel.setEmployeeName(val[1]);
												uModel.setEmployeeNumber(val[2]);
												uModel.setPrimaryTelephoneNumber(val[3]);
												List<String> error_message_list = new ArrayList<String>();
												if (userList
														.get(k)
														.getEmailAddress()
														.equalsIgnoreCase(
																val[0]))
													error_message_list
															.add(messageUtil
																	.getBundle("user.email.already.present"));
												if (userList
														.get(k)
														.getEmployeeNumber()
														.equalsIgnoreCase(
																val[2]))
													error_message_list
															.add(messageUtil
																	.getBundle("user.employeenumber.already.present"));
												if (userList
														.get(k)
														.getPrimaryTelephoneNumber()
														.equalsIgnoreCase(
																val[3]))
													error_message_list
															.add(messageUtil
																	.getBundle("user.primaryTelephone.already.present"));

												uModel.setError_message_list(error_message_list);

												// as validation already failed
												// no
												// need to check sub-role from
												// sol_id
												failedmodels.add(uModel);
												valid_flag = false;
											}
											k++;
										}
									} else {
										UserModel uModel = new UserModel();
										uModel.setEmailAddress(val[0]);
										uModel.setEmployeeName(val[1]);
										uModel.setEmployeeNumber(val[2]);
										uModel.setPrimaryTelephoneNumber(val[3]);
										List<String> error_message_list = new ArrayList<String>();
										if (!email_flag) {
											error_message_list
													.add(messageUtil
															.getBundle("user.email.format.not.correct"));
										}
										if (!phone_flag) {
											error_message_list
													.add(messageUtil
															.getBundle("user.phone.format.not.correct"));
										}
										// uModel.setSubRoleLevelId(subRoleLevelModel.getRoleLevelId());

										uModel.setError_message_list(error_message_list);
										failedmodels.add(uModel);
										valid_flag = false;
									}
									if (valid_flag) {
										SubRoleLevelModel subRoleLevelModel = subRoleLevelService
												.getSubRoleLevelByUniqueId(val[4]);

										if (subRoleLevelModel == null) {
											UserModel uModel = new UserModel();
											uModel.setEmailAddress(val[0]);
											uModel.setEmployeeName(val[1]);
											uModel.setEmployeeNumber(val[2]);
											uModel.setPrimaryTelephoneNumber(val[3]);
											// uModel.setSubRoleLevelId(subRoleLevelModel.getRoleLevelId());
											failedmodels.add(uModel);
											valid_flag = false;
										}

										if (valid_flag) {

											UserModel uModel = new UserModel();
											uModel.setEmailAddress(val[0]);
											uModel.setEmployeeName(val[1]);
											uModel.setEmployeeNumber(val[2]);
											uModel.setPrimaryTelephoneNumber(val[3]);
											uModel.setCreatedBy(createdBy);
											uModel.setRoleId(Integer
													.parseInt(roleId));
											uModel.setUserName(val[2]);
											uModel.setSubRoleLevelId(subRoleLevelModel
													.getRoleLevelId());
											uModel.setUserParentId(this
													.ajaxCallForUserList(subRoleLevelModel));

											uModel.setProfilePicture("big-profile.jpeg"); // Setting
																							// Default
																							// Profile
																							// Picture
																							// For
																							// User
											uModel.setPassword(AutogeneratedPassword
													.generateRandomPassword()); // Setting
																				// Default
																				// Password
																				// For
																				// User

											userList.add(uModel);// updating
																	// list for
																	// validating
																	// fields

											this.insertUserData(uModel);
										}
									}
								}
							}

						} else {
							mismatchedRowsList.add(i + 1);
						}
					}

				}
			} else if (file.getOriginalFilename().contains(".xlsx")) {
				File excelfile = convert(file);
				FileInputStream inputStream = new FileInputStream(excelfile);

				XSSFWorkbook workbook = new XSSFWorkbook(inputStream);
				XSSFSheet sheet = workbook.getSheetAt(0);
				rows = sheet.getPhysicalNumberOfRows();
				for (int i = 0; i < rows; i++) {
					boolean valid_flag = true;
					//
					XSSFRow row = sheet.getRow(i);
					if (row != null) {
						int cells = row.getPhysicalNumberOfCells();
						String value = "";
						//
						for (int j = 0; j < cells; j++) {
							//
							XSSFCell cell = row.getCell(j);
							if (cell != null) {
								switch (cell.getCellType()) {
								case XSSFCell.CELL_TYPE_FORMULA:
									break;
								case XSSFCell.CELL_TYPE_NUMERIC:
									value += (int) cell.getNumericCellValue()
											+ ",";
									break;
								case XSSFCell.CELL_TYPE_STRING:
									value += cell.getStringCellValue() + ",";
									break;
								default:
									break;
								}
							}
						}
						// mysql
						String[] val = value.split(",");

						if (val.length == user_upload_rows) {

							System.out.println(val.length);

							if (i > 0) {

								if (user_upload_rows > 0) {

									// val[0] email_address
									// val[1] employee_name
									// val[2] employee_number
									// val[3] primary telephone
									// val[4] sol_id
									int k = 0;
									String email_regex_pattern = "^[\\w-_\\.+]*[\\w-_\\.]\\@([\\w]+\\.)+[\\w]+[\\w]$";
									String phone_regex_pattern = "^[0-9]{10}$";
									boolean phone_flag = val[3]
											.matches(phone_regex_pattern);
									boolean email_flag = val[0]
											.matches(email_regex_pattern);
									if (email_flag && phone_flag) {
										while (k < userList.size()) {
											if (userList.get(k)
													.getEmailAddress()
													.equalsIgnoreCase(val[0])
													|| userList
															.get(k)
															.getPrimaryTelephoneNumber()
															.equalsIgnoreCase(
																	val[3])) {

												UserModel uModel = new UserModel();
												uModel.setEmailAddress(val[0]);
												uModel.setEmployeeName(val[1]);
												uModel.setEmployeeNumber(val[2]);
												uModel.setPrimaryTelephoneNumber(val[3]);

												List<String> error_message_list = new ArrayList<String>();
												if (userList
														.get(k)
														.getEmailAddress()
														.equalsIgnoreCase(
																val[0]))
													error_message_list
															.add(messageUtil
																	.getBundle("user.email.already.present"));
												if (userList
														.get(k)
														.getEmployeeNumber()
														.equalsIgnoreCase(
																val[3]))
													error_message_list
															.add(messageUtil
																	.getBundle("user.employeenumber.already.present"));
												if (userList
														.get(k)
														.getPrimaryTelephoneNumber()
														.equalsIgnoreCase(
																val[2]))
													error_message_list
															.add(messageUtil
																	.getBundle("user.primaryTelephone.already.present"));

												uModel.setError_message_list(error_message_list);
												// as validation already failed
												// no
												// need to check sub-role from
												// sol_id
												failedmodels.add(uModel);
												valid_flag = false;
											}
											k++;
										}
									} else {
										UserModel uModel = new UserModel();
										uModel.setEmailAddress(val[0]);
										uModel.setEmployeeName(val[1]);
										uModel.setEmployeeNumber(val[2]);
										uModel.setPrimaryTelephoneNumber(val[3]);
										List<String> error_message_list = new ArrayList<String>();
										if (!email_flag) {
											error_message_list
													.add(messageUtil
															.getBundle("user.phone.format.not.correct"));
										}
										if (!phone_flag) {
											error_message_list
													.add(messageUtil
															.getBundle("user.email.format.not.correct"));
										}
										// uModel.setSubRoleLevelId(subRoleLevelModel.getRoleLevelId());

										uModel.setError_message_list(error_message_list);
										// uModel.setSubRoleLevelId(subRoleLevelModel.getRoleLevelId());
										failedmodels.add(uModel);
										valid_flag = false;
									}
									if (valid_flag) {
										SubRoleLevelModel subRoleLevelModel = subRoleLevelService
												.getSubRoleLevelByUniqueId(val[4]);

										if (subRoleLevelModel == null) {
											UserModel uModel = new UserModel();
											uModel.setEmailAddress(val[0]);
											uModel.setEmployeeName(val[1]);
											uModel.setEmployeeNumber(val[2]);
											uModel.setPrimaryTelephoneNumber(val[3]);
											// uModel.setSubRoleLevelId(subRoleLevelModel.getRoleLevelId());
											failedmodels.add(uModel);
											valid_flag = false;
										}

										if (valid_flag) {

											UserModel uModel = new UserModel();
											uModel.setEmailAddress(val[0]);
											uModel.setEmployeeName(val[1]);
											uModel.setEmployeeNumber(val[2]);
											uModel.setPrimaryTelephoneNumber(val[3]);
											uModel.setCreatedBy(createdBy);
											uModel.setRoleId(Integer
													.parseInt(roleId));
											uModel.setSubRoleLevelId(subRoleLevelModel
													.getRoleLevelId());
											uModel.setUserParentId(this
													.ajaxCallForUserList(subRoleLevelModel));

											uModel.setProfilePicture("big-profile.jpeg"); // Setting
																							// Default
																							// Profile
																							// Picture
																							// For
																							// User
											uModel.setPassword(AutogeneratedPassword
													.generateRandomPassword()); // Setting
																				// Default
																				// Password
																				// For
																				// User

											userList.add(uModel);// updating
																	// list for
																	// validating
																	// fields
											this.insertUserData(uModel);
										}
									}
								}
							}

						} else {
							mismatchedRowsList.add(i + 1);
						}
					}

				}
			}

		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		UserModel unmatchedRows = new UserModel();
		unmatchedRows.setAbout("mismatchedRowslist");
		unmatchedRows.setUnmatchedLists(mismatchedRowsList);

		failedmodels.add(unmatchedRows);
		return failedmodels;
	}

	public static File convert(MultipartFile file) throws IOException {
		File convFile = new File(file.getOriginalFilename());
		convFile.createNewFile();
		FileOutputStream fos = new FileOutputStream(convFile);
		fos.write(file.getBytes());
		fos.close();
		return convFile;
	}

	public List<UserModel> getUserList() throws DataNotFound, ObjectNotFound {
		List<UserEntity> userEntities = userDao.findAllActiveUserByStatus();
		for (UserEntity userEntity : userEntities) {
			System.out
					.println("find all method :: "
							+ userEntity.getUserId()
							+ " "
							+ userEntity.getEmployeeName()
							+ " "
							+ userEntity.getUserEntity().getUserId()
							+ "  "
							+ userEntity.getUserEntity().getEmployeeName()
							+ " "
							+ userEntity.getRoleEntity().getRoleId()
							+ " "
							+ userEntity.getRoleEntity().getRoleName()
							+ " "
							+ userEntity.getSubRoleLevelEntity()
									.getSubRoleLevelId()
							+ " "
							+ userEntity.getSubRoleLevelEntity()
									.getDescription());
		}

		if (userEntities == null || userEntities.isEmpty()
				|| userEntities.size() == 0)
			throw new DataNotFound(messageUtil.getBundle("userListNotFound"));

		List<UserModel> userModels = userConverter
				.entityListToModelList(userEntities);
		return userModels;

	}

	public UserModel getUserByUseId(UserModel userModel) throws ObjectNotFound {

		UserEntity userEntity = userDao.find(userModel.getUserId());
		/*
		 * System.out.println("1 userEntity :: " + userEntity.getUserId() + " "
		 * + userEntity.getEmployeeName() + " " +
		 * userEntity.getUserEntity().getUserId() + "  " +
		 * userEntity.getUserEntity().getEmployeeName() + " " +
		 * userEntity.getRoleEntity().getRoleId() + " " +
		 * userEntity.getRoleEntity().getRoleName() + " " +
		 * userEntity.getSubRoleLevelEntity().getSubRoleLevelId() + " " +
		 * userEntity.getSubRoleLevelEntity().getDescription());
		 */
		userModel = userConverter.entityToModel(userEntity);
		return userModel;
	}

	public void editUserData(UserModel userModel) throws FormExceptions,
			DataNotFound, RecordFound, ObjectNotFound {

		System.out.println("user inputs in edit section :: role id :: "
				+ userModel.getRoleId() + "  sub role level :: "
				+ userModel.getSubRoleLevelId() + " primary :: "
				+ userModel.getPrimaryTelephoneNumber() + " user name :: "
				+ userModel.getUserName() + " email :: "
				+ userModel.getEmailAddress() + " employee number :: "
				+ userModel.getEmployeeNumber() + " parent id :: "
				+ userModel.getUserParentId());
		userDataValidation.UserCreateValidate(userModel);

		Map<String, Exception> exceptions = new HashMap<String, Exception>();

		String email_regex_pattern = "^[\\w-_\\.+]*[\\w-_\\.]\\@([\\w]+\\.)+[\\w]+[\\w]$";
		String phone_regex_pattern = "^[0-9]{10}$";
		boolean phone_flag = userModel.getPrimaryTelephoneNumber().matches(
				phone_regex_pattern);
		boolean email_flag = userModel.getEmailAddress().matches(
				email_regex_pattern);

		if (!phone_flag)
			exceptions.put(
					"phoneFormatNotCorrect",
					new RecordFound(messageUtil
							.getBundle("user.phone.format.not.correct")));
		if (!email_flag)
			exceptions.put(
					"emailFormatNotCorrect",
					new RecordFound(messageUtil
							.getBundle("user.email.format.not.correct")));

		if (exceptions.size() > 0)
			throw new FormExceptions(exceptions);

		List<UserModel> userList = this.fetchOtherUserByStatus(userModel);
		int k = 0;
		while (k < userList.size()) {
			if (userList.get(k).getUserName()
					.equalsIgnoreCase(userModel.getUserName())) {
				exceptions
						.put("usernameAlreadypresent",
								new RecordFound(
										messageUtil
												.getBundle("user.username.already.present")));
			}
			if (userList.get(k).getEmployeeNumber()
					.equalsIgnoreCase(userModel.getEmployeeNumber())) {
				exceptions
						.put("userEmployeeNumberAlreadypresent",
								new RecordFound(
										messageUtil
												.getBundle("user.employeenumber.already.present")));
			}
			if (userList.get(k).getEmailAddress()
					.equalsIgnoreCase(userModel.getEmailAddress())) {
				exceptions.put("userEmailAlreadyPresent", new RecordFound(
						messageUtil.getBundle("user.email.already.present")));
			}
			if (userList.get(k).getPrimaryTelephoneNumber()
					.equalsIgnoreCase(userModel.getPrimaryTelephoneNumber())) {
				exceptions
						.put("userPrimaryTelephoneAlreadyPresent",
								new RecordFound(
										messageUtil
												.getBundle("user.primaryTelephone.already.present")));
			}
			k++;
		}

		if (exceptions.size() > 0)
			throw new FormExceptions(exceptions);

		UserEntity userEntity = userDao.find(userModel.getUserId());

		userEntity = userConverter.updateModelToEntity(userModel, userEntity);
		userDao.update(userEntity);

	}

	private List<UserModel> fetchOtherUserByStatus(UserModel userModel)
			throws DataNotFound, ObjectNotFound {
		List<UserModel> userModels = userConverter
				.entityListToModelList(userDao
						.findOtherActiveUserByStatus(userModel));

		return userModels;
	}

	public void deleteUser(UserModel userModel) {

		UserEntity userEntity = userDao.find(userModel.getUserId());
		System.out.println("role Entity Converted :: userparentid --> "
				+ userEntity.getUserEntity().getUserId() + " subroleid-->  "
				+ userEntity.getSubRoleLevelEntity().getSubRoleLevelId()
				+ " roleid--> " + userEntity.getRoleEntity().getRoleId()
				+ " employeename-->  " + userEntity.getEmployeeName());
		userEntity = userConverter.deleteModelToEntity(userModel, userEntity);
		userDao.update(userEntity);
	}

	public List<UserModel> fetchAllUserByStatus() throws DataNotFound,
			ObjectNotFound {

		List<UserModel> userModels = userConverter
				.entityListToModelList(userDao.findAllActiveUserByStatus());

		return userModels;
	}

	public List<UserModel> fetchAllUserByRole(int roleId) throws DataNotFound,
			ObjectNotFound {

		List<UserModel> userModels = userConverter
				.entityListToModelList(userDao.findAllActiveUserByRole(roleId));

		return userModels;
	}

	public UserModel adminLoginCheck(UserModel userModel) throws DataNotFound,
			ObjectNotFound {

		List<UserEntity> userEntities = userDao.adminLoginCheck(userModel);
		if (userEntities.isEmpty() || userEntities == null
				|| userEntities.size() == 0) {
			System.out.println("noooo user found");
			throw new DataNotFound(
					messageUtil.getBundle("invalid.login.credentials"));
		} else {
			for (UserEntity userEntity : userEntities) {
				System.out.println("data ---> " + userEntity.getUserName()
						+ "  " + userEntity.getEmployeeName() + " "
						+ userEntity.getRoleEntity().getRoleName());
				userModel = userConverter.entityToModel(userEntity);
			}
		}
		return userModel;
	}

	/*********************************************** User Module For View Profile ******************************************************/

	public void updateUserProfile(UserModel userModel) {

		if (logger.isDebugEnabled()) {
			logger.debug("updateUserProfile-Start ");
		}

		UserEntity userEntity = userDao.find(userModel.getUserId());

		userDao.update(userConverter.updateModelToEntityForUser(userModel,
				userEntity));

		if (logger.isDebugEnabled()) {
			logger.debug("updateUserProfile-End ");
		}
	}

	/************************************************* ADmin Update Profile ----------------------------------------- */

	public void editAdminData(UserModel userModel) throws FormExceptions,
			DataNotFound, RecordFound, ObjectNotFound {

		userModel.setUserName(userModel.getEmployeeNumber());
		userDataValidation.AdminUpdateValidate(userModel);

		Map<String, Exception> exceptions = new HashMap<String, Exception>();

		String email_regex_pattern = "^[\\w-_\\.+]*[\\w-_\\.]\\@([\\w]+\\.)+[\\w]+[\\w]$";
		String phone_regex_pattern = "^[0-9]{10}$";
		boolean phone_flag = userModel.getPrimaryTelephoneNumber().matches(
				phone_regex_pattern);
		boolean email_flag = userModel.getEmailAddress().matches(
				email_regex_pattern);

		if (!phone_flag)
			exceptions.put(
					"phoneFormatNotCorrect",
					new RecordFound(messageUtil
							.getBundle("user.phone.format.not.correct")));
		if (!email_flag)
			exceptions.put(
					"emailFormatNotCorrect",
					new RecordFound(messageUtil
							.getBundle("user.email.format.not.correct")));

		if (exceptions.size() > 0)
			throw new FormExceptions(exceptions);

		List<UserModel> userList = this.fetchOtherUserByStatus(userModel);
		int k = 0;
		while (k < userList.size()) {
			if ((userList.get(k).getUserName().equalsIgnoreCase(userModel.getUserName())) && !(userList.get(k).getUserId() == userModel.getUserId()  )) {
				exceptions
						.put("usernameAlreadypresent",
								new RecordFound(
										messageUtil
												.getBundle("user.username.already.present")));
			}
			if ((userList.get(k).getEmployeeNumber().equalsIgnoreCase(userModel.getEmployeeNumber())) && !(userList.get(k).getUserId() == userModel.getUserId())) {
				exceptions
						.put("userEmployeeNumberAlreadypresent",
								new RecordFound(
										messageUtil
												.getBundle("user.employeenumber.already.present")));
			}
			if ((userList.get(k).getEmailAddress().equalsIgnoreCase(userModel.getEmailAddress())) && !(userList.get(k).getUserId() == userModel.getUserId()  )) {
				exceptions.put("userEmailAlreadyPresent", new RecordFound(
						messageUtil.getBundle("user.email.already.present")));
			}
			if (userList.get(k).getPrimaryTelephoneNumber().equalsIgnoreCase(userModel.getPrimaryTelephoneNumber())) {
				exceptions
						.put("userPrimaryTelephoneAlreadyPresent",
								new RecordFound(
										messageUtil
												.getBundle("user.primaryTelephone.already.present")));
			}
			k++;
		}

		if (exceptions.size() > 0)
			throw new FormExceptions(exceptions);

		UserEntity userEntity = userDao.find(userModel.getUserId());

		userEntity = userConverter.updateAdminModelToEntity(userModel, userEntity);
		userDao.update(userEntity);

	}
}
